extends ../../_layout

block vars
  - var pageTitle = 'Case Study: lynnandtonic.com 2018 refresh'
  - var pageDescription = 'Thoughts and process for the lynnandtonic.com 2018 redesign.'
  - var pagePath = 'case-study-2018-refresh'
  - var bodyClass = 'thought-detail'
  - var date = '20 December 2018'
  - var ogImage = 'refresh-2018'
  - var laterText = '2018 British Arrows Awards'
  - var later = '2018-british-arrows-awards'
  - var earlierText = 'Thoughts from Phoenix Design Week 2018'
  - var earlier = 'thoughts-from-phxdw-2018'

block styles
  link(rel='stylesheet', href='/assets/css/code.css')

block scripts
  script(src='/assets/js/highlight.pack.js')
  <script>hljs.initHighlightingOnLoad();</script>

block content

  p
    small: em Update: This version of the site is archived but #[a(href=' /archive/2018/') still viewable here].

  p It‚Äôs that time of year again where I refresh my portfolio site. The 2017 redesign got a huge response, probably my favorite version of the site ever. If you‚Äôre curious, you can #[a(href='/archive/2017') view the archived 2017 site] or #[a(href='/thoughts/entries/case-study-2017-refresh/') read the case study].

  p In sum though, the 2017 redesign featured #[a(href='https://twitter.com/DannPetty/status/943621861740630017') 20 media queries where the site changed drastically every 100px]. I knew this year I wanted to build upon that concept.

  p In the previous version, the 21 separate layouts each utilized their available space, but their order in sequence wasn‚Äôt all that deliberate. I thought it might be interesting if things still changed as you scaled the browser, but the change was #[em meaningful] depending on whether you were scaling up or down.

  p A few ideas seemed promising: 

  ul
    li Maybe the viewport could zoom in or out on an aerial map or scene. Go from a macro view of something small and zoom out into space.
    li Maybe the user could feel like they were moving deeper into a physical space using layered imagery. Like walking through rooms in a first-person video game.
    li Maybe things could be ‚Äútipped off a table‚Äù as the browser edge came into contact or grow in number as the browser grows.

  p With all of these, it felt like animation was going to be an important part. I researched and thought a lot about various animation techniques and styles. Should it be CSS-drawn? Should JavaScript lend a hand here? How can I have interesting imagery that changes over many breakpoints without having a massive amount to download? I knew it‚Äôd probably be a lot of work, but #[em how much] work?

  p A good compromise I landed on was animating a single character. I could keep the illustration style pretty simple and possibly show various frames by shifting a #[code background-image] sprite in the same way we do for other imagery on our websites.

  p So what could be fun with that constraint? I thought about a person moving across the screen as the browser moved or getting more cramped inside a ‚Äúbox‚Äù as the browser shrunk. I knew I wanted the animation to work both ways‚Äîso you could resize the browser randomly and everything still made sense.

  figure
    img(src='/assets/images/thoughts/lynnandtonic-2018-smoosh.jpg', width='1200', height='619', alt='exploratory drawings of Lynn‚Äôs face smooshed against an implied glass wall')

    figcaption.footnote some early exploratory sketches

  p If anything was going to shrink/grow with the browser, why not clothes? They could shrink teeny tiny and grow huge and baggy. That might be fun. I tried a few illustration styles (including a nod to #[em The Loud House]) before settling on paying tribute to the genius #[em Bob‚Äôs Burgers].

  figure
    img.wide(src='/assets/images/thoughts/lynnandtonic-2018-illo-styles.jpg', width='1200', height='696', alt='exploratory drawings of Lynn in different styles')
    figcaption.footnote more exploratory sketches

  p With this style (from the show outro), I could keep things simple and make a fun background that wouldn‚Äôt distract from the character animation in the foreground.

  img(src='/assets/images/thoughts/bobs-burgers-credits.gif', width='500', height='443', alt='an animated gif of Jimmy Pesto Jr. dancing in the Bob‚Äôs Burgers outro')

  h2 Preparing the artwork

  p I started by drawing three full frames to see if it felt like a good direction to go. All the people I showed laughed when they saw it, so I decided to go all in.

  img(src='/assets/images/thoughts/lynnandtonic-2018-three-frames.jpg', width='1200', height='661', alt='three illustrations of Lynn, one with tiny, shrunken clothes, one normal, and one with huge, oversized clothes')

  p As I drew all the in-between frames, I realized it would be a lot to download, especially if I was using SVG (so many anchor points). So I continued making every frame for the items that needed it and reusable frames for other pieces.

  img.wide(src='/assets/images/thoughts/lynnandtonic-2018-clothes-sprite.jpg', width='1200', height='756', alt='an image sprite of all the frames for Lynn‚Äôs clothing')
  img(src='/assets/images/thoughts/lynnandtonic-2018-faces.jpg', alt='many variations of Lynn‚Äôs face')

  p The hair, faces, mouths, arms and legs became little reusable libraries. I sprited together as much as made sense to reduce the number of files.

  img(src='/assets/images/thoughts/lynnandtonic-2018-other-sprite.jpg', width='1200', height='1290', alt='variations of hair, faces, mouths, arms and legs')

  p And with SVG, every anchor point matters, so I spent some time simplifying and optimizing the artwork in Illustrator. I made small changes to reduce points, like smoothing lines, removing some shadowing, and ditching the ribbed lines on the hoodie‚Äôs cuffs.


  img(src='/assets/images/thoughts/lynnandtonic-2018-hoodies.jpg', width='1200', height='687', alt='a comparison between a hoodie illustration and a simplified one')

  p I‚Äôll tell you what, I learned a lot of new shortcuts in Illustrator. Nothing quite like extremely tedious tasks to get you streamlining. After export, I ran it through a handful of SVG optimizers until I got a result I felt comfortable with.

  p In between all of that, I did dabble with the idea of using PNGs instead. File size was sometimes smaller, but I lost the scaling flexibility I ultimately decided I wanted.

  h2 Markup and Styling

  p Sorry this isn‚Äôt a single div üòÇ. I set up the background and character with the following markup:

  :markdown-it
    ```
      <div class="lynns-burgers">
        <div class="lynn">
          <div class="other legs"></div>
          <div class="other shoes"></div>
          <div class="clothes pants"></div>
          <div class="other arm arm-left"></div>
          <div class="other arm arm-right"></div>
          <div class="other hair"></div>
          <div class="other shirt"></div>
          <div class="clothes hoodie"></div>
          <div class="other face"></div>
          <div class="other mouth"></div>
        </div>
      </div>
    ```

  p With regards to the CSS, I‚Äôll start by saying I would not have attempted this without a preprocessor. I‚Äôm using Stylus variables and mixins a whole bunch to make everything more manageable (I ultimately needed to write over 220 media queries). This does add a lot of moving pieces and a few layers of abstraction. It made it worlds easier for me to accomplish what I needed but, as I‚Äôve realized trying to write this, it makes things a lot harder to explain.

  p So, in the interest of time and all of our brain goo, I‚Äôll go over a couple specific pieces that went into producing the animated sequence. If you want to dig in and see all the weird decisions I made, you can #[a(href='https://github.com/lynnandtonic/lynnandtonic.com') view the source code on GitHub].

  p For most of the pieces (like the shoes, legs, clothing, hair), I give the #[code &lt;div&gt;] dimensions, declare a background sprite, and position it appropriately. Then its #[code background-position] is shifted, giving each media query a new frame of the sequence.

  img.wide.border(src='/assets/images/thoughts/lynnandtonic-2018-placement-other.jpg', width='926', height='409', alt='parts of Lynn‚Äôs body highlighted with dev tools showing placement')

  p Let‚Äôs say the frames changed every 20px, and the width of each #[code .hair] frame is 100px, then the CSS might look something like this:

  :markdown-it
    ```
      @media screen and (min-width: 501px) and (max-width: 520px) {
        .hair {
          background-position: 0 0;
        }
      }
      @media screen and (min-width: 521px) and (max-width: 540px) {
        .hair {
          background-position: -100px 0;
        }
      }
      @media screen and (min-width: 541px) and (max-width: 560px) {
        .hair {
          background-position: -300px 0;
        }
      }
    ```

  p Some of the pieces (like arms, mouths, and chin dimples), needed to have their #[code background-position] changed with each query, but also to be positioned and sometimes rotated.

  img.wide.border(src='/assets/images/thoughts/lynnandtonic-2018-placement-arms.jpg', width='926', height='409', alt='another dev tools highlighted image')

  p So a media query for these pieces might look more like this:

  :markdown-it
    ```
      @media screen and (min-width: 501px) and (max-width: 520px) {
        .arm-left {
          background-position: -50px 0;
          left: 103px;
          top: 56px;
          transform: rotate(14deg);
        }
      }
    ```

  p This is #[em a lot] of CSS to write (44 frames for most character pieces), so Stylus is a huge help here. This might need some closer inspection at the source files to really grok, but here‚Äôs a preview of what I was doing.

  p I was able to reuse a lot of the media query syntax with variables and mixins:


  :markdown-it
    ``` css
      /* Set min-width and frame increment */
      $min-w = 412px
      $step = 23

      /* Shift background-position only */
      frame(number, args) {
        @media screen and (min-width: $min-w + $step * number) and (max-width: $min-w + $step * (number + 1) - 1) {
          background-position: args;
        }
      }

      /* Shift position only */
      move(number, left, bottom) {
        @media screen and (min-width: $min-w + $step * number) and (max-width: $min-w + $step * (number + 1) - 1) {
          left: left;
          bottom: bottom;
        }
      }

      /* Shift background-position, position, and rotate */
      place(number, args, left, top, deg) {
        @media screen and (min-width: $min-w + $step * number) and (max-width: $min-w + $step * (number + 1) - 1) {
          background-position: args;
          left: left;
          top: top;
          transform: rotate(deg);
        }
      }
    ```

  p With a bunch of other #[a(href='https://github.com/lynnandtonic/lynnandtonic.com/blob/master/_styl/pages/home/_variables.styl') variable declarations], I was able to write each of the frames/queries like this:

  :markdown-it
    ``` css
      .hair
        frame(0, $hair-2)
        frame(1, $hair-3)
        frame(2, $hair-4)
        frame(3, $hair-2)
        frame(4, $hair-5)
        ...

      .arm-left
        place(0, $arm-3, calc(var(--arm-base) * .74), calc(var(--arm-base) * 1.18), 14deg)
        place(1, $arm-5, calc(var(--arm-base) * .72), calc(var(--arm-base) * 1.18), 10deg)
        place(2, $arm-7, calc(var(--arm-base) * .78), calc(var(--arm-base) * 1.22),  9deg)
        place(3, $arm-5, calc(var(--arm-base) * .78), calc(var(--arm-base) * 1.18),  4deg)
        place(4, $arm-5, calc(var(--arm-base) * .76), calc(var(--arm-base) * 1.18),  7deg)
        ...
    ```

  p I know that #[code place] declaration looks a bit scary, but it provided the most clarity for me about what was happening with each query. I‚Äôm using #[code calc()] and CSS custom properties here which I‚Äôll get to in a bit.

  h2 Hold up

  p You might be wondering why I didn‚Äôt save the entire character for each frame so I‚Äôd only have to shift one large image sprite. Why the pain of all these different variables, mixins, and things?

  p The practical reason is the sprite would have been a ginormous file, even as a PNG and #[em especially] as an SVG. Breaking the illustration into pieces made file sizes more manageable.

  p But to be honest, shifting one large sprite just isn‚Äôt as fun?

  p I wanted to try this and see if I could do it. It was challenging and satisfying figuring out how to organize things, how to piece everything together, and how to work through all the small tweaks to make the animation work. Something something #[a(href='https://frankchimero.com/blog/2011/the-long-hard-stupid-way/') Frank Chimero, the long, hard, stupid way] something something.

  h2 So what else was involved?

  p There are a few more #[a(href='https://github.com/lynnandtonic/lynnandtonic.com/blob/master/_styl/pages/home/_breakpoints.styl') media query mixins] I used for more fine-grain control of what was happening. A ‚Äòrange‚Äô query to have a frame show for multiple #[code $step] increments, a ‚Äòhide‚Äô query to add #[code display: none] to elements when they weren‚Äôt needed (like the legs once the pants grew long), and a ‚Äòlast‚Äô query with no #[code max-width] for the final frame. Those would show up like this:

  :markdown-it
    ``` css
      .legs
        ...
        frame(        7,     $legs-1)
        frame-range(  8, 12, $legs-5)
        frame-range( 12, 16, $legs-2)
        hide-min(    16)

      .hair
        ...
        frame(       39,     $hair-2)
        frame-range( 40, 42, $hair-3)
        frame(       42,     $hair-2)
        frame-last(  43,     $hair-14)
    ```

  p There‚Äôs two different #[code $step] increments being set: 23px for laptop screens and 47px for monitor-sized screens. Most desktop users should get the full sequence without having to move to a larger screen.

  p For tall screens, the artwork gets resized which allowed me to dabble with CSS custom properties. With #[code calc()] and custom properties, it was easy to swap in new values depending on the user‚Äôs context. I know a transform probably would have worked too, but again, not as fun.

  p The site also takes advantage of some PostCSS plugins. I have four CSS files compiling from Stylus:

  :markdown-it
    ```
      üìÇ css
        üìÑ generated-home-base.css    /* base styles */
        üìÑ generated-home-large.css   /* for monitor views, 47px step increment */
        üìÑ generated-home-small.css   /* for laptop views, 23px step increment */
        üìÑ generated-post.css         /* for PostCSS processing */
    ```

  p Note: If it was possible to use a combination of #[code calc()] and custom properties #[em inside] the media queries, I could have eliminated the need for separate large.css and small.css files.

  p PostCSS plugin #[a(href='https://www.npmjs.com/package/css-mqpacker') css_mqpacker] takes the large.css and small.css and consolidates repeated media queries. So the many, many media queries would go from something like this:

  :markdown-it
    ```
      @media screen and (min-width: 401px) {
        .hair {
          background-position: -100px 0;
        }
      }
      @media screen and (min-width: 401px) {
        .legs {
          background-position: -200px -150px;
        }
      }
    ```

  p to something like this:

  :markdown-it
    ```
      @media screen and (min-width: 401px) {
        .hair {
          background-position: -100px 0;
        }
        .legs {
          background-position: -200px -150px;
        }
      }
    ```

  p Seems small, but saves #[em a lot] of characters across 220 media queries.

  p Then #[a(href='https://www.npmjs.com/package/postcss-import') postcss_import] compiles the four files into one glorious home.css.

  h2 Any weird hiccups?

  p I originally had the #[code .lynns-burgers] container centered using flexbox. Easy peasy. But when I resized the browser, the artwork would shift left/right slightly every few pixels as it was repositioned. This created a vibrating effect that I did not like one bit.

  p Using the ol‚Äô fixed position, then translate pattern did the trick. I‚Äôm guessing it‚Äôs because the calculation is happening on the width of element instead and the browser is never dividing an uneven number of pixels.

  :markdown-it
    ```
      .lynns-burgers {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
      }
    ```

  p But THEN, the character artwork started doing the vibration thing. Oy. The issue here was position values being calculated as decimals. I needed to make sure each #[code calc()] would return a whole pixel value, even as the custom properties changed.

  p So that would ultimately end up looking something like this:

  :markdown-it
    ``` css
      /* set custom properties */
      @media screen and (max-height: 900px) {
        :root {
          --mouth-base: 100px;
        }
      }
      @media screen and (min-height: 901px) {
        :root {
          --mouth-base: 150px;
        }
      }

      /* calculation multipliers should be even */
      .mouth
        place(0, $mouth-2,  calc(var(--mouth-base) * 1.14), calc(var(--mouth-base) * .52), -3deg)
        place(1, $mouth-12, calc(var(--mouth-base) * 1.16), calc(var(--mouth-base) * .52),  5deg)
        place(2, $mouth-14, calc(var(--mouth-base) * 1.18), calc(var(--mouth-base) * .50),  5deg)
        ...
    ```

  h2 That‚Äôs it! Sort of.

  p Looking through the final files and writing it all out makes it seem like so. much. (And there‚Äôs a lot I didn‚Äôt include here.) But it was definitely a process of discovery. I‚Äôm certain there are more efficient ways to do this, but that‚Äôs for another day.

  figure
    img.border(src='/assets/images/thoughts/lynnandtonic-2018.jpg', width='1200', height='789', alt='full homepage with Lynn in the Bob‚Äôs Burger-inspired scene')
    figcaption.footnote The finished site!

  h2 An Archive

  p Oh! I also added an archive featuring #[em every] version of this site dating back to 2007. It was super fun to look back through them. I still love every one of them so much. You can #[a(href='/archive') view them all in their dated glory here].

  img(src='/assets/images/thoughts/lynnandtonic-2018-archive.jpg', width='1200', height='672', alt='a grid of screenshots of past versions of the site')

  h2 Whew, so‚Ä¶ why all that?

  p As usual, I wanted to try some new things and make something that might bring some joy to the web (it‚Äôs been a long year). #[a(href='/thoughts/entries/why-do-work-without-a-practical-purpose/') Here‚Äôs a good reminder] of why I do work like this.

  p I‚Äôve been spending a lot of time in Illustrator lately. I recently redid some #[a(href='https://css-tricks.com/snippets/css/complete-guide-grid/') CSS grid] and #[a(href='https://css-tricks.com/snippets/css/a-guide-to-flexbox/') flexbox diagrams] for CSSTricks and I‚Äôm working on a top secret illustration project with Heroku. You might say I‚Äôve been in an illustratin‚Äô mood.

  p I‚Äôve never done frame animation like this and it was an insightful introduction. Wow, the patience it requires!

  p I was also able to gain some experience optimizing my Illustrator workflow, vector artwork, and exported SVGs. I got to dabble with CSS properties (so cool) and with PostCSS (also very cool).

  p And best of all I had fun with it. I hope you have fun with it too. Until next year!
